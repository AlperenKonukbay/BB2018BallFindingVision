// Adds empty build, clean, and assemble tasks to project
plugins {
    id 'base'
    id 'org.hidetake.ssh' version '2.9.0'
}

allprojects {
    // NOTE: If you do a build on Windows targeting another architecture, tests
    // will (naturally) fail.  Therefore, you can do:
    // gradlew build -x test -Ptarget="arm-raspbian"
    // If development of Windows and targeting windows, simply do:
    // gradlew build
    // valid targets = windows (default), arm-raspbian, armhf

    ext.buildType = project.hasProperty('target') ? project.property('target') : 'windows'

    ext.outputDirectory = file("${rootDir}/output")
}

remotes {
    piccb {
        host = 'visioncoproc.local'
        user = 'pi'
        password = 'raspberry'
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
    fileTransfer = 'scp'
}

// Normally this is implicit with java plugin, but base plugin makes no sub-project assumptions
build.dependsOn ':CameraServer:build', ':CameraVision:build', ':NTSimulator:build'

task copyStartupScript(type: Copy) {
  description "Copies the startup application to the root output directory."
  destinationDir = outputDirectory
  if (buildType == "windows") {
    from (file("startup.bat")) {
    }
    from (file("local-debug-startup.bat")) {
    }
  } else {
    from (file("startup.sh")) {
    }
    from (file("startup-debug.sh")) {
    }
    from (file("local-debug-startup.sh")) {
    }
  }
}

build.dependsOn copyStartupScript

clean {
    inputs.dir outputDirectory
    description "Remove the root output directory."
    delete outputDirectory
}

// Make the deploy task accept a parameter that will tell below which remote
// to deploy to.
task deploy(dependsOn: build) {
    doLast {
        if (buildType == "windows") {
            println "Windows deployment not coded at this time."
        } else {
            ssh.run {
                session(remotes.piccb) {
                    // Install dependencies
                    // This should bring up project from a fresh raspbian install.
                    // You must have ssh installed first using `sudo raspi-config`.
                    // Will this work on the robo-rio?
                    // Doubt it...don't know...must test.
                    try {
                        // this little trick will quickly determine if we are connected
                        // to the internet and will throw an error if not
                        execute 'nc -z 8.8.8.8 53'
                        executeSudo 'apt-get --assume-yes update'
                        executeSudo 'apt-get --assume-yes install dos2unix'
                        executeSudo 'apt-get --assume-yes install python3'
                        executeSudo 'apt-get --assume-yes install python3-pip'
                        executeSudo 'apt-get --assume-yes install oracle-java8-jdk'
                        executeSudo 'apt-get --assume-yes install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools'
                        execute 'pip3 install -U pynetworktables'
                    } catch (Exception e)
                    {
                        println "Could not install dependencies.  Connected to Internet?"
                    }
                    // Now copy the build
                    put from: 'output', into: '/home/pi'
                    execute 'chmod u+x /home/pi/output/*.sh'
                    execute 'dos2unix /home/pi/output/*.sh'
                }
            }
        }
    }
}