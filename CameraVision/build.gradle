plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'java'
apply plugin: 'application'

// Change the line below if you change the name of your main Java class
mainClassName = 'Main'
// Change the line below to change the name of the output jar
def projectName = 'CameraVision'

// Shouldn't need to change anything below this point
apply from: 'dependencies.gradle'

repositories {
    mavenCentral()
    maven {
      url "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

dependencies {
  compile ntcoreDep()
  compile cscoreDep()
  compile 'org.opencv:opencv-java:3.1.0'
  compile 'com.beust:jcommander:1.72'
  testCompile 'junit:junit:4.11'
  testCompile 'org.mockito:mockito-core:2.7.22'
}

test {
  // log the following test events to the console...otherwise, everything is written to a report
  testLogging {
    events "PASSED", "STARTED", "FAILED", "SKIPPED"
  }

  options {
    // This makes the native opencv bits available to be found and loaded by unit tests
    // TODO: add LD_LIBRARY_PATH for linux targets
    // This also will probably bork up when, for example,
    // building on Windows targeting the raspberry pi...
    // so something will need to be figured out...(like blowing off the test step for example)
    if (buildType == "windows") {
      def path = '' + openCvUnzipLocation
      environment 'PATH', path
    }
  }
}

jar {
  baseName = projectName
}

shadowJar {
  baseName = projectName
}

distributions {
  main {
    baseName = projectName
    contents {
      from (openCvUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
        into 'bin/'
      }
    }
  }
}

task writeExecuteScript() {
  dependsOn jar
  doLast {
    if (buildType == "windows") {
      def runFile = new File("${buildDir}/run${projectName}.bat")
      runFile.write "java -Djava.library.path=. -jar ${projectName}-all.jar --team 997 --nthost localhost --cameraurl \"http://localhost:1337/mjpeg_stream\""
    } else {
      def runFile = new File("${buildDir}/run${projectName}")
      runFile.write "java -Djava.library.path=. -jar ${projectName}-all.jar --team 997"
    }
  }
}

task copyToOutput(type: Copy) {
  dependsOn shadowJar
  dependsOn unzipOpenCv
  dependsOn writeExecuteScript
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (openCvUnzipLocation) {
    exclude 'META-INF'
    exclude '**/MANIFEST.MF'
  }
  if (buildType == "windows") {
    from (file("${buildDir}/run${projectName}.bat")) {
    }
  } else {
    from (file("${buildDir}/run${projectName}")) {
    }
  }
}

task zipOutput(type: Zip) {
  baseName = projectName
  duplicatesStrategy = 'exclude'
  dependsOn shadowJar
  dependsOn unzipOpenCv
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (openCvUnzipLocation) {
    exclude 'META-INF'
    exclude '**/MANIFEST.MF'
  }
  if (buildType == "windows") {
    from (file("${buildDir}/run${projectName}.bat")) {
    }
  } else {
    from (file("${buildDir}/run${projectName}")) {
      fileMode 0777
    }
  }
}

distZip.dependsOn unzipOpenCv
distTar.dependsOn unzipOpenCv

applicationDefaultJvmArgs = ["-Djava.library.path=${openCvUnzipLocation}"]

build.dependsOn copyToOutput
build.dependsOn zipOutput
run.dependsOn unzipOpenCv
